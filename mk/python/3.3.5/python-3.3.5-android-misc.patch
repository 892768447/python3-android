diff -ru Python-3.3.5/Lib/platform.py Python-3.3.5-android/Lib/platform.py
--- Python-3.3.5/Lib/platform.py	2014-03-09 09:40:13.000000000 +0100
+++ Python-3.3.5-android/Lib/platform.py	2014-08-04 22:19:36.000000000 +0200
@@ -368,6 +368,63 @@
                               supported_dists=supported_dists,
                               full_distribution_name=0)

+_android_environment_vars = (
+    'ANDROID_ROOT', 'ANDROID_ASSETS', 'ANDROID_STORAGE', 'ANDROID_DATA',
+    'ANDROID_PROPERTY_WORKSPACE', 'ANDROID_BOOTLOGO')
+_android_version_property = 'ro.build.version.release'
+_android_buildstr_property = 'ro.build.version.full'
+
+def android_version(version='', buildstr=''):
+    """ Attempt to get the Android version number and build string.
+
+        The function checks for the getprop binary to retrieve build info,
+        and falls back to manually reading /system/build.prop if available.
+
+        Returns a (version, buildstr) tuple which defaults to the args given
+        as parameters.
+    """
+    if not any(os.getenv(e) for e in _android_environment_vars):
+        # Probably not on Android...
+        return version, buildstr
+
+    version_obtained = False
+    buildstr_obtained = False
+
+    # Try the 'official' API tool first, since /system/build.prop might
+    # not be the only source for properties.
+    if os.access('/system/bin/getprop', os.X_OK):
+        try:
+            output = subprocess.check_output(['/system/bin/getprop',
+                                              _android_version_property])
+            version = output.decode('ascii').strip()
+            version_obtained = True
+        except (subprocess.CalledProcessError, UnicodeDecodeError):
+            pass
+
+        try:
+            output = subprocess.check_output(['/system/bin/getprop',
+                                              _android_buildstr_property])
+            buildstr = output.decode('ascii').strip()
+            buildstr_obtained = True
+        except (subprocess.CalledProcessError, UnicodeDecodeError):
+            pass
+    done = version_obtained and buildstr_obtained
+
+    # Fall back to parsing /system/build.prop manually.
+    if not done and os.path.isfile('/system/build.prop'):
+        for line in open('/system/build.prop'):
+            if '=' not in line:
+                continue
+            key, val = line.split('=')
+            key = key.strip()
+
+            if not version_obtained and key == _android_version_property:
+                version = val.strip()
+            elif not buildstr_obtained and key == _android_buildstr_property:
+                buildstr = val.strip()
+
+    return version, buildstr
+
 def popen(cmd, mode='r', bufsize=-1):

     """ Portable popen() interface.
diff -ru Python-3.3.5/Lib/subprocess.py Python-3.3.5-android/Lib/subprocess.py
--- Python-3.3.5/Lib/subprocess.py	2014-03-09 09:40:13.000000000 +0100
+++ Python-3.3.5-android/Lib/subprocess.py	2014-08-04 22:19:36.000000000 +0200
@@ -1343,9 +1343,18 @@
                 args = list(args)

             if shell:
-                args = ["/bin/sh", "-c"] + args
                 if executable:
-                    args[0] = executable
+                    main = executable
+                elif os.path.isfile('/bin/sh'):
+                    main = '/bin/sh'
+                else:
+                    import platform
+                    if platform.android_version()[0]:
+                        main = '/system/bin/sh'
+                    else:
+                        raise RuntimeError('Could not find system shell')
+
+                args = [main, "-c"] + args

             if executable is None:
                 executable = args[0]
diff -ru Python-3.3.5/Lib/test/test_subprocess.py Python-3.3.5-android/Lib/test/test_subprocess.py
--- Python-3.3.5/Lib/test/test_subprocess.py	2014-03-09 09:40:19.000000000 +0100
+++ Python-3.3.5-android/Lib/test/test_subprocess.py	2014-08-04 22:19:36.000000000 +0200
@@ -17,6 +17,7 @@
 import shutil
 import gc
 import textwrap
+import platform

 try:
     import resource
@@ -1356,7 +1357,10 @@
         fd, fname = mkstemp()
         # reopen in text mode
         with open(fd, "w", errors="surrogateescape") as fobj:
-            fobj.write("#!/bin/sh\n")
+            if platform.android_version()[0]:
+                fobj.write('#!/system/bin/sh\n')
+            else:
+                fobj.write("#!/bin/sh\n")
             fobj.write("exec '%s' -c 'import sys; sys.exit(47)'\n" %
                        sys.executable)
         os.chmod(fname, 0o700)
@@ -1401,7 +1405,10 @@
         fd, fname = mkstemp()
         # reopen in text mode
         with open(fd, "w", errors="surrogateescape") as fobj:
-            fobj.write("#!/bin/sh\n")
+            if platform.android_version()[0]:
+                fobj.write('#!/system/bin/sh\n')
+            else:
+                fobj.write("#!/bin/sh\n")
             fobj.write("exec '%s' -c 'import sys; sys.exit(47)'\n" %
                        sys.executable)
         os.chmod(fname, 0o700)
diff -ru Python-3.3.5/Modules/pwdmodule.c Python-3.3.5-android/Modules/pwdmodule.c
--- Python-3.3.5/Modules/pwdmodule.c	2014-03-09 09:40:28.000000000 +0100
+++ Python-3.3.5-android/Modules/pwdmodule.c	2014-08-04 22:19:36.000000000 +0200
@@ -76,7 +76,7 @@
 #endif
     PyStructSequence_SET_ITEM(v, setIndex++, _PyLong_FromUid(p->pw_uid));
     PyStructSequence_SET_ITEM(v, setIndex++, _PyLong_FromGid(p->pw_gid));
-#ifdef __VMS
+#if defined(__VMS) || defined(__ANDROID__)
     SETS(setIndex++, "");
 #else
     SETS(setIndex++, p->pw_gecos);
diff -ru Python-3.3.5/Modules/socketmodule.c Python-3.3.5-android/Modules/socketmodule.c
--- Python-3.3.5/Modules/socketmodule.c	2014-03-09 09:40:28.000000000 +0100
+++ Python-3.3.5-android/Modules/socketmodule.c	2014-08-04 22:19:36.000000000 +0200
@@ -150,7 +150,7 @@
    On the other hand, not all Linux versions agree, so there the settings
    computed by the configure script are needed! */

-#ifndef linux
+#if !defined(linux) || __ANDROID__
 # undef HAVE_GETHOSTBYNAME_R_3_ARG
 # undef HAVE_GETHOSTBYNAME_R_5_ARG
 # undef HAVE_GETHOSTBYNAME_R_6_ARG
@@ -169,7 +169,7 @@
 #  define HAVE_GETHOSTBYNAME_R_3_ARG
 # elif defined(__sun) || defined(__sgi)
 #  define HAVE_GETHOSTBYNAME_R_5_ARG
-# elif defined(linux)
+# elif defined(linux) && !__ANDROID__
 /* Rely on the configure script */
 # else
 #  undef HAVE_GETHOSTBYNAME_R
diff -ru Python-3.3.5/Modules/posixmodule.c Python-3.3.5-android/Modules/posixmodule.c
--- Python-3.3.5/Modules/posixmodule.c	2014-03-09 04:40:28.000000000 -0400
+++ Python-3.3.5-android/Modules/posixmodule.c	2015-02-23 10:44:09.000000000 -0500
@@ -2585,19 +2585,19 @@
 #else
 
     Py_BEGIN_ALLOW_THREADS
-#ifdef HAVE_FACCESSAT
-    if ((dir_fd != DEFAULT_DIR_FD) ||
-        effective_ids ||
-        !follow_symlinks) {
-        int flags = 0;
-        if (!follow_symlinks)
-            flags |= AT_SYMLINK_NOFOLLOW;
-        if (effective_ids)
-            flags |= AT_EACCESS;
-        result = faccessat(dir_fd, path.narrow, mode, flags);
-    }
-    else
-#endif
+// #ifdef HAVE_FACCESSAT
+//     if ((dir_fd != DEFAULT_DIR_FD) ||
+//         effective_ids ||
+//         !follow_symlinks) {
+//         int flags = 0;
+//         if (!follow_symlinks)
+//             flags |= AT_SYMLINK_NOFOLLOW;
+//         if (effective_ids)
+//             flags |= AT_EACCESS;
+//         result = faccessat(dir_fd, path.narrow, mode, flags);
+//     }
+//     else
+// #endif
         result = access(path.narrow, mode);
     Py_END_ALLOW_THREADS
     return_value = PyBool_FromLong(!result);
diff -ru Python-3.3.5/Python/pytime.c Python-3.3.5-android/Python/pytime.c
--- Python-3.3.5/Python/pytime.c    2015-02-23 11:54:25.000000000 -0500
+++ Python-3.3.5-android/Python/pytime.c    2015-02-23 11:55:19.000000000 -0500
@@ -3,7 +3,7 @@
 #include <windows.h>
 #endif
 
-#if defined(__APPLE__) && defined(HAVE_GETTIMEOFDAY) && defined(HAVE_FTIME)
+#if (defined(__APPLE__) || defined(__ANDROID__)) && defined(HAVE_GETTIMEOFDAY) && defined(HAVE_FTIME)
   /*
    * _PyTime_gettimeofday falls back to ftime when getttimeofday fails because the latter
    * might fail on some platforms. This fallback is unwanted on MacOSX because
