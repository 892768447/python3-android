diff --git a/Modules/_cursesmodule.c b/Modules/_cursesmodule.c
index 78a79e8eef..5471795b0f 100644
--- a/Modules/_cursesmodule.c
+++ b/Modules/_cursesmodule.c
@@ -523,7 +523,7 @@ PyCursesWindow_New(WINDOW *win, const char *encoding)
             PyOS_snprintf(buffer, sizeof(buffer), "cp%u", cp);
             encoding = buffer;
         }
-#elif defined(CODESET)
+#elif defined(HAVE_NL_LANGINFO) && defined(CODESET)
         const char *codeset = nl_langinfo(CODESET);
         if (codeset != NULL && codeset[0] != 0)
             encoding = codeset;
diff --git a/Modules/_localemodule.c b/Modules/_localemodule.c
index feb3802900..4caa571a65 100644
--- a/Modules/_localemodule.c
+++ b/Modules/_localemodule.c
@@ -427,6 +427,7 @@ static struct langinfo_constant{
     {0, 0}
 };
 
+#ifdef HAVE_NL_LANGINFO
 PyDoc_STRVAR(nl_langinfo__doc__,
 "nl_langinfo(key) -> string\n"
 "Return the value for the locale information associated with key.");
@@ -451,6 +452,7 @@ PyLocale_nl_langinfo(PyObject* self, PyObject* args)
     PyErr_SetString(PyExc_ValueError, "unsupported langinfo constant");
     return NULL;
 }
+#endif /* HAVE_NL_LANGINFO */
 #endif /* HAVE_LANGINFO_H */
 
 #ifdef HAVE_LIBINTL_H
@@ -583,7 +585,7 @@ static struct PyMethodDef PyLocale_Methods[] = {
 #if defined(MS_WINDOWS)
   {"_getdefaultlocale", (PyCFunction) PyLocale_getdefaultlocale, METH_NOARGS},
 #endif
-#ifdef HAVE_LANGINFO_H
+#if defined(HAVE_NL_LANGINFO)
   {"nl_langinfo", (PyCFunction) PyLocale_nl_langinfo,
    METH_VARARGS, nl_langinfo__doc__},
 #endif
diff --git a/Python/fileutils.c b/Python/fileutils.c
index e84d66e99a..9b2c58dc2c 100644
--- a/Python/fileutils.c
+++ b/Python/fileutils.c
@@ -60,7 +60,7 @@ _Py_device_encoding(int fd)
        has no console */
     if (cp != 0)
         return PyUnicode_FromFormat("cp%u", (unsigned int)cp);
-#elif defined(CODESET)
+#elif defined(HAVE_NL_LANGINFO) && defined(CODESET)
     {
         char *codeset = nl_langinfo(CODESET);
         if (codeset != NULL && codeset[0] != 0)
@@ -102,7 +102,7 @@ static int
 check_force_ascii(void)
 {
     char *loc;
-#if defined(HAVE_LANGINFO_H) && defined(CODESET)
+#if defined(HAVE_NL_LANGINFO) && defined(CODESET)
     char *codeset, **alias;
     char encoding[20];   /* longest name: "iso_646.irv_1991\0" */
     int is_ascii;
@@ -134,7 +134,7 @@ check_force_ascii(void)
         return 0;
     }
 
-#if defined(HAVE_LANGINFO_H) && defined(CODESET)
+#if defined(HAVE_NL_LANGINFO) && defined(CODESET)
     codeset = nl_langinfo(CODESET);
     if (!codeset || codeset[0] == '\0') {
         /* CODESET is not set or empty */
diff --git a/Python/pylifecycle.c b/Python/pylifecycle.c
index 06030c330a..b0ab515244 100644
--- a/Python/pylifecycle.c
+++ b/Python/pylifecycle.c
@@ -230,7 +230,7 @@ get_locale_encoding(void)
     char codepage[100];
     PyOS_snprintf(codepage, sizeof(codepage), "cp%d", GetACP());
     return get_codec_name(codepage);
-#elif defined(HAVE_LANGINFO_H) && defined(CODESET)
+#elif defined(HAVE_NL_LANGINFO) && defined(CODESET)
     char* codeset = nl_langinfo(CODESET);
     if (!codeset || codeset[0] == '\0') {
         PyErr_SetString(PyExc_ValueError, "CODESET is not set or empty");
@@ -483,7 +483,7 @@ _Py_CoerceLegacyLocale(void)
                 const char *new_locale = setlocale(LC_CTYPE,
                                                    target->locale_name);
                 if (new_locale != NULL) {
-#if !defined(__APPLE__) && defined(HAVE_LANGINFO_H) && defined(CODESET)
+#if !defined(__APPLE__) && defined(HAVE_NL_LANGINFO) && defined(CODESET)
                     /* Also ensure that nl_langinfo works in this locale */
                     char *codeset = nl_langinfo(CODESET);
                     if (!codeset || *codeset == '\0') {
diff --git a/configure.ac b/configure.ac
index 5610c5759d..bfcfaf4dba 100644
--- a/configure.ac
+++ b/configure.ac
@@ -3422,7 +3422,7 @@ AC_CHECK_FUNCS(alarm accept4 setitimer getitimer bind_textdomain_codeset chown \
  getpriority getresuid getresgid getpwent getspnam getspent getsid getwd \
  initgroups kill killpg lchmod lchown linkat lstat lutimes mmap \
  memrchr mbrtowc mkdirat mkfifo \
- mkfifoat mknod mknodat mktime mremap nice openat pathconf pause pipe2 plock poll \
+ mkfifoat mknod mknodat mktime mremap nice nl_langinfo openat pathconf pause pipe2 plock poll \
  posix_fallocate posix_fadvise pread \
  pthread_init pthread_kill putenv pwrite readlink readlinkat readv realpath renameat \
  sem_open sem_timedwait sem_getvalue sem_unlink sendfile setegid seteuid \
diff --git a/Lib/_bootlocale.py b/Lib/_bootlocale.py
index 0c61b0d3a0..b54a6020fe 100644
--- a/Lib/_bootlocale.py
+++ b/Lib/_bootlocale.py
@@ -12,10 +12,10 @@ if sys.platform.startswith("win"):
         return _locale._getdefaultlocale()[1]
 else:
     try:
-        _locale.CODESET
+        _locale.nl_langinfo, _locale.CODESET
     except AttributeError:
         if hasattr(sys, 'getandroidapilevel'):
-            # On Android langinfo.h and CODESET are missing, and UTF-8 is
+            # On Android nl_langinfo() is missing, and UTF-8 is
             # always used in mbstowcs() and wcstombs().
             def getpreferredencoding(do_setlocale=True):
                 return 'UTF-8'
diff --git a/Lib/locale.py b/Lib/locale.py
index f8d1d78c36..d62bc76488 100644
--- a/Lib/locale.py
+++ b/Lib/locale.py
@@ -614,12 +614,12 @@ if sys.platform.startswith("win"):
         import _bootlocale
         return _bootlocale.getpreferredencoding(False)
 else:
-    # On Unix, if CODESET is available, use that.
+    # On Unix, if both nl_langinfo and CODESET are available, use them.
     try:
-        CODESET
+        nl_langinfo, CODESET
     except NameError:
         if hasattr(sys, 'getandroidapilevel'):
-            # On Android langinfo.h and CODESET are missing, and UTF-8 is
+            # On Android nl_langinfo() is missing, and UTF-8 is
             # always used in mbstowcs() and wcstombs().
             def getpreferredencoding(do_setlocale = True):
                 return 'UTF-8'
