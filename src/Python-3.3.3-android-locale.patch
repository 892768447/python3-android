diff -r 1927f47a1838 Modules/main.c
--- a/Modules/main.c	Wed Jul 30 19:24:32 2014 -0400
+++ b/Modules/main.c	Fri Aug 01 14:15:50 2014 +0200
@@ -540,7 +540,7 @@ Py_Main(int argc, wchar_t **argv)
         oldloc = _PyMem_RawStrdup(setlocale(LC_ALL, NULL));
         setlocale(LC_ALL, "");
         for (p = strtok(buf, ","); p != NULL; p = strtok(NULL, ",")) {
-#ifdef __APPLE__
+#if defined(__APPLE__) || defined(__ANDROID__)
             /* Use utf-8 on Mac OS X */
             unicode = PyUnicode_FromString(p);
 #else
diff -r 1927f47a1838 Objects/unicodeobject.c
--- a/Objects/unicodeobject.c	Wed Jul 30 19:24:32 2014 -0400
+++ b/Objects/unicodeobject.c	Fri Aug 01 14:15:50 2014 +0200
@@ -3205,13 +3205,22 @@ wcstombs_errorpos(const wchar_t *wstr)
 static int
 locale_error_handler(const char *errors, int *surrogateescape)
 {
+
     if (errors == NULL) {
+#ifdef __ANDROID__
+        *surrogateescape = 1;
+#else
         *surrogateescape = 0;
+#endif
         return 0;
     }
 
     if (strcmp(errors, "strict") == 0) {
+#ifdef __ANDROID__
+        *surrogateescape = 1;
+#else
         *surrogateescape = 0;
+#endif
         return 0;
     }
     if (strcmp(errors, "surrogateescape") == 0) {
@@ -3340,7 +3349,7 @@ PyUnicode_EncodeFSDefault(PyObject *unic
 {
 #ifdef HAVE_MBCS
     return PyUnicode_EncodeCodePage(CP_ACP, unicode, NULL);
-#elif defined(__APPLE__)
+#elif defined(__APPLE__) || defined(__ANDROID__)
     return _PyUnicode_AsUTF8String(unicode, "surrogateescape");
 #else
     PyInterpreterState *interp = PyThreadState_GET()->interp;
@@ -3626,7 +3635,7 @@ PyUnicode_DecodeFSDefaultAndSize(const c
 {
 #ifdef HAVE_MBCS
     return PyUnicode_DecodeMBCS(s, size, NULL);
-#elif defined(__APPLE__)
+#elif defined(__APPLE__) || defined(__ANDROID__)
     return PyUnicode_DecodeUTF8Stateful(s, size, "surrogateescape", NULL);
 #else
     PyInterpreterState *interp = PyThreadState_GET()->interp;
@@ -4811,7 +4820,7 @@ onError:
     return NULL;
 }
 
-#ifdef __APPLE__
+#if defined(__APPLE__) || defined(__ANDROID__)
 
 /* Simplified UTF-8 decoder using surrogateescape error handler,
    used to decode the command line arguments on Mac OS X.
diff -r 1927f47a1838 Python/bltinmodule.c
--- a/Python/bltinmodule.c	Wed Jul 30 19:24:32 2014 -0400
+++ b/Python/bltinmodule.c	Fri Aug 01 14:15:50 2014 +0200
@@ -24,7 +24,7 @@
 #ifdef HAVE_MBCS
 const char *Py_FileSystemDefaultEncoding = "mbcs";
 int Py_HasFileSystemDefaultEncoding = 1;
-#elif defined(__APPLE__)
+#elif defined(__APPLE__) || defined(__ANDROID__)
 const char *Py_FileSystemDefaultEncoding = "utf-8";
 int Py_HasFileSystemDefaultEncoding = 1;
 #else
diff -r 1927f47a1838 Python/fileutils.c
--- a/Python/fileutils.c	Wed Jul 30 19:24:32 2014 -0400
+++ b/Python/fileutils.c	Fri Aug 01 14:15:50 2014 +0200
@@ -18,7 +18,7 @@
 #include <fcntl.h>
 #endif /* HAVE_FCNTL_H */
 
-#ifdef __APPLE__
+#if defined(__APPLE__) || defined(__ANDROID__)
 extern wchar_t* _Py_DecodeUTF8_surrogateescape(const char *s, Py_ssize_t size);
 #endif
 
@@ -63,7 +63,7 @@ PyObject *
     Py_RETURN_NONE;
 }
 
-#if !defined(__APPLE__) && !defined(MS_WINDOWS)
+#if !defined(__APPLE__) && !defined(__ANDROID__) && !defined(MS_WINDOWS)
 extern int _Py_normalize_encoding(const char *, char *, size_t);
 
 /* Workaround FreeBSD and OpenIndiana locale encoding issue with the C locale.
@@ -213,7 +213,7 @@ encode_ascii_surrogateescape(const wchar
 }
 #endif   /* !defined(__APPLE__) && !defined(MS_WINDOWS) */
 
-#if !defined(__APPLE__) && (!defined(MS_WINDOWS) || !defined(HAVE_MBRTOWC))
+#if !defined(__APPLE__) && !defined(__ANDROID__) && (!defined(MS_WINDOWS) || !defined(HAVE_MBRTOWC))
 static wchar_t*
 decode_ascii_surrogateescape(const char *arg, size_t *size)
 {
@@ -260,7 +260,7 @@ decode_ascii_surrogateescape(const char 
 wchar_t*
 _Py_char2wchar(const char* arg, size_t *size)
 {
-#ifdef __APPLE__
+#if defined(__APPLE__) || defined(__ANDROID__)
     wchar_t *wstr;
     wstr = _Py_DecodeUTF8_surrogateescape(arg, strlen(arg));
     if (size != NULL) {
@@ -403,7 +403,7 @@ oom:
 char*
 _Py_wchar2char(const wchar_t *text, size_t *error_pos)
 {
-#ifdef __APPLE__
+#if defined(__APPLE__) || defined(__ANDROID__)
     Py_ssize_t len;
     PyObject *unicode, *bytes = NULL;
     char *cpath;
diff -ru Python-3.3.3/Modules/_decimal/libmpdec/io.c Python-3.3.3-android/Modules/_decimal/libmpdec/io.c
--- Python-3.3.3/Modules/_decimal/libmpdec/io.c 2013-11-17 07:22:59.000000000 +0000
+++ Python-3.3.3-android/Modules/_decimal/libmpdec/io.c 2014-01-19 13:57:42.845608288 +0000
@@ -868,10 +868,17 @@
         }
         spec->type = *cp++;
         spec->type = (spec->type == 'N') ? 'G' : 'g';
+#ifdef __ANDROID__
+        spec->dot = ".";
+        spec->sep = ",";
+        spec->grouping = "\3";
+#else
         lc = localeconv();
         spec->dot = lc->decimal_point;
         spec->sep = lc->thousands_sep;
         spec->grouping = lc->grouping;
+#endif
+
         if (mpd_validate_lconv(spec) < 0) {
             return 0; /* GCOV_NOT_REACHED */
         }
diff -ru Python-3.3.3/Modules/_localemodule.c Python-3.3.3-android/Modules/_localemodule.c
--- Python-3.3.3/Modules/_localemodule.c    2013-11-17 07:23:00.000000000 +0000
+++ Python-3.3.3-android/Modules/_localemodule.c    2014-01-19 13:56:11.445606234 +0000
@@ -141,6 +141,11 @@
     if (!result)
         return NULL;
 
+#ifdef __ANDROID__
+    /* Don't even try on Android's broken locale.h. */
+    goto failed;
+#else
+
     /* if LC_NUMERIC is different in the C library, use saved value */
     l = localeconv();
 
@@ -189,6 +194,7 @@
     RESULT_INT(p_sign_posn);
     RESULT_INT(n_sign_posn);
     return result;
+#endif // __ANDROID__
 
   failed:
     Py_XDECREF(result);
diff -ru Python-3.3.3/Python/fileutils.c Python-3.3.3-android/Python/fileutils.c
--- Python-3.3.3/Python/fileutils.c 2013-11-17 07:23:07.000000000 +0000
+++ Python-3.3.3-android/Python/fileutils.c 2014-01-19 13:47:05.093593955 +0000
@@ -4,8 +4,8 @@
 #  include <windows.h>
 #endif
 
-#ifdef HAVE_LANGINFO_H
 #include <locale.h>
+#ifdef HAVE_LANGINFO_H
 #include <langinfo.h>
 #endif
 
diff -ru Python-3.3.3/Python/formatter_unicode.c Python-3.3.3-android/Python/formatter_unicode.c
--- Python-3.3.3/Python/formatter_unicode.c 2013-11-17 07:23:07.000000000 +0000
+++ Python-3.3.3-android/Python/formatter_unicode.c 2014-01-19 13:55:06.177604767 +0000
@@ -665,6 +665,7 @@
 {
     switch (type) {
     case LT_CURRENT_LOCALE: {
+#ifndef __ANDROID__
         struct lconv *locale_data = localeconv();
         locale_info->decimal_point = PyUnicode_DecodeLocale(
                                          locale_data->decimal_point,
@@ -680,6 +681,7 @@
         }
         locale_info->grouping = locale_data->grouping;
         break;
+#endif // __ANDROID__
     }
     case LT_DEFAULT_LOCALE:
         locale_info->decimal_point = PyUnicode_FromOrdinal('.');
diff -ru Python-3.3.3/Python/pystrtod.c Python-3.3.3-android/Python/pystrtod.c
--- Python-3.3.3/Python/pystrtod.c  2013-11-17 07:23:07.000000000 +0000
+++ Python-3.3.3-android/Python/pystrtod.c  2014-01-19 13:53:46.805602983 +0000
@@ -177,8 +177,12 @@
 
     fail_pos = NULL;
 
+#ifdef __ANDROID__
+    decimal_point = "."; 
+#else
     locale_data = localeconv();
     decimal_point = locale_data->decimal_point;
+#endif
     decimal_point_len = strlen(decimal_point);
 
     assert(decimal_point_len != 0);
@@ -378,8 +382,12 @@
 Py_LOCAL_INLINE(void)
 change_decimal_from_locale_to_dot(char* buffer)
 {
+#ifdef __ANDROID__
+    const char *decimal_point = ".";
+#else
     struct lconv *locale_data = localeconv();
     const char *decimal_point = locale_data->decimal_point;
+#endif
 
     if (decimal_point[0] != '.' || decimal_point[1] != 0) {
         size_t decimal_point_len = strlen(decimal_point);
diff -ru Python-3.3.3/Python/pythonrun.c Python-3.3.3-android/Python/pythonrun.c
--- Python-3.3.3/Python/pythonrun.c 2013-11-17 07:23:07.000000000 +0000
+++ Python-3.3.3-android/Python/pythonrun.c 2014-07-31 13:37:52.342899267 +0000
@@ -188,6 +188,8 @@
         return NULL;
     }
     return get_codec_name(codeset);
+#elif __ANDROID__
+    return get_codec_name("UTF-8");
 #else
     PyErr_SetNone(PyExc_NotImplementedError);
     return NULL;
