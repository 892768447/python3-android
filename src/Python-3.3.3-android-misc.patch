diff -ru Python-3.3.3/Modules/pwdmodule.c Python-3.3.3-android/Modules/pwdmodule.c
--- Python-3.3.3/Modules/pwdmodule.c    2013-11-17 07:23:01.000000000 +0000
+++ Python-3.3.3-android/Modules/pwdmodule.c    2014-01-19 13:47:05.093593955 +0000
@@ -76,7 +76,7 @@
 #endif
     PyStructSequence_SET_ITEM(v, setIndex++, _PyLong_FromUid(p->pw_uid));
     PyStructSequence_SET_ITEM(v, setIndex++, _PyLong_FromGid(p->pw_gid));
-#ifdef __VMS
+#if defined(__VMS) || defined(__ANDROID__)
     SETS(setIndex++, "");
 #else
     SETS(setIndex++, p->pw_gecos);
diff -ru Python-3.3.3/Modules/_posixsubprocess.c Python-3.3.3-android/Modules/_posixsubprocess.c
--- Python-3.3.3/Modules/_posixsubprocess.c 2013-11-17 07:23:00.000000000 +0000
+++ Python-3.3.3-android/Modules/_posixsubprocess.c 2014-01-19 15:44:12.881751904 +0000
@@ -18,6 +18,12 @@
 #include <dirent.h>
 #endif
 
+#if defined(__ANDROID__)
+/* Android doesn't expose syscalls. Let's add the definition manually. */
+# include <sys/linux-syscalls.h>
+# define SYS_getdents64  __NR_getdents64
+#endif
+
 #if defined(sun)
 /* readdir64 is used to work around Solaris 9 bug 6395699. */
 # define readdir readdir64
diff -ru Python-3.3.3/Modules/socketmodule.c Python-3.3.3-android/Modules/socketmodule.c
--- Python-3.3.3/Modules/socketmodule.c        2013-11-17 07:23:02.000000000 +0000
+++ Python-3.3.3-android/Modules/socketmodule.c        2014-07-31 16:53:59.482873274 +0000
@@ -150,7 +150,7 @@
    On the other hand, not all Linux versions agree, so there the settings
    computed by the configure script are needed! */
 
-#ifndef linux
+#if !defined(linux) || __ANDROID__
 # undef HAVE_GETHOSTBYNAME_R_3_ARG
 # undef HAVE_GETHOSTBYNAME_R_5_ARG
 # undef HAVE_GETHOSTBYNAME_R_6_ARG
@@ -169,7 +169,7 @@
 #  define HAVE_GETHOSTBYNAME_R_3_ARG
 # elif defined(__sun) || defined(__sgi)
 #  define HAVE_GETHOSTBYNAME_R_5_ARG
-# elif defined(linux)
+# elif defined(linux) && !__ANDROID__
 /* Rely on the configure script */
 # else
 #  undef HAVE_GETHOSTBYNAME_R
diff -ru Python-3.3.3/Lib/platform.py Python-3.3.3-android/Lib/platform.py
--- Python-3.3.3/Lib/platform.py	2013-11-17 07:22:38.000000000 +0000
+++ Python-3.3.3-android/Lib/platform.py	2014-08-03 17:07:13.377376523 +0000
@@ -363,6 +363,59 @@
                               supported_dists=supported_dists,
                               full_distribution_name=0)

+_android_environment_vars = (
+    'ANDROID_ROOT', 'ANDROID_ASSETS', 'ANDROID_STORAGE', 'ANDROID_DATA',
+    'ANDROID_PROPERTY_WORKSPACE', 'ANDROID_BOOTLOGO')
+_android_version_property = 'ro.build.version.release'
+_android_buildstr_property = 'ro.build.version.full'
+
+def android_version(version='', buildstr=''):
+    """ Attempt to get the Android version number and build string.
+
+        The function checks
+    """
+    if not any(os.getvar(e) for e in _android_environment_vars):
+        # Probably not on Android...
+        return version, buildstr
+
+    version_obtained = False
+    buildstr_obtained = False
+
+    # Try the 'official' API tool first, since /system/build.prop might
+    # not be the only source for properties.
+    if os.access('/system/bin/getprop', os.X_OK):
+        try:
+            output = subprocess.check_output(['/system/bin/getprop',
+                                              _android_version_property])
+            version = output.decode('ascii').strip()
+            version_obtained = True
+        except (subprocess.CalledProcessError, UnicodeDecodeError):
+            pass
+
+        try:
+            output = subprocess.check_output(['/system/bin/getprop',
+                                              _android_buildstr_property])
+            buildstr = output.decode('ascii').strip()
+            buildstr_obtained = True
+        except (subprocess.CalledProcessError, UnicodeDecodeError):
+            pass
+    done = version_obtained and buildstr_obtained
+
+    # Fall back to parsing /system/build.prop manually.
+    if not done and os.path.isfile('/system/build.prop'):
+        for line in open('/system/build.prop'):
+            if '=' not in line:
+                continue
+            key, val = line.split('=')
+            key = key.strip()
+
+            if not version_obtained and key == _android_version_property:
+                version = val.strip()
+            elif not buildstr_obtained and key == _android_buildstr_property:
+                buildstr = val.strip()
+
+     return version, buildstr
+
 def popen(cmd, mode='r', bufsize=-1):

     """ Portable popen() interface.
diff -ru Python-3.3.3/Lib/subprocess.py Python-3.3.3-android/Lib/subprocess.py
--- Python-3.3.3/Lib/subprocess.py	2013-11-17 07:22:39.000000000 +0000
+++ Python-3.3.3-android/Lib/subprocess.py	2014-08-01 23:31:05.711735647 +0000
@@ -1343,9 +1343,18 @@
                 args = list(args)
 
             if shell:
-                args = ["/bin/sh", "-c"] + args
                 if executable:
-                    args[0] = executable
+                    main = executable
+                elif os.path.isfile('/bin/sh'):
+                    main = '/bin/sh'
+                else:
+                    import platform
+                    if platform.linux_distribution()[0] == 'Android':
+                        main = '/system/bin/sh'
+                    else:
+                        raise RuntimeError('Could not find shell binary to execute command with.')
+
+                args = [main, "-c"] + args
 
             if executable is None:
                 executable = args[0]

